#!/bin/bash

osd='nope'
inc='5'
capvol='yes'
maxvol='200'
tmpfile='/tmp/pasink.tmp'
autosync='yes'

active_sink=`pacmd list-sinks |awk '/* index:/{print $3}'`
limit=$(expr 100 - ${inc})
maxlimit=$(expr ${maxvol} - ${inc})

current_sink_num=''
sink_num_check=''
app_name_check=''


LANGUAGE="en_US"

function volUp {

        getCurVol

        if [ ${capvol} = 'yes' ]
        then
                if [ ${curVol} -le 100 -a ${curVol} -ge ${limit} ]
                then
                        pactl set-sink-volume ${active_sink} 100%
                elif [ ${curVol} -lt ${limit} ]
                then
                        pactl set-sink-volume ${active_sink} +${inc}%
                fi
        elif [ ${curVol} -le ${maxvol} -a ${curVol} -ge ${maxlimit} ]
        then
                pactl set-sink-volume ${active_sink} ${maxvol}%
        elif [ ${curVol} -lt ${maxlimit} ]
        then
                pactl set-sink-volume ${active_sink} +${inc}%
        fi

        getCurVol

        if [ ${osd} = 'yes' ]
        then
                qdbus org.kde.kded /modules/kosd showVolume ${curVol} 0
        fi

        if [ ${autosync} = 'yes' ]
        then
                volSync
        fi
}

function volDown {

        pactl set-sink-volume ${active_sink} -${inc}%
        getCurVol

        if [ ${osd} = 'yes' ]
        then
                qdbus org.kde.kded /modules/kosd showVolume ${curVol} 0
        fi

        if [ ${autosync} = 'yes' ]
        then
                volSync
        fi

}

function getSinkInputs {

        inputs=`pacmd list-sink-inputs |grep -B 4 'sink: '${1}' ' |awk '/index:/{print $2}' >${tmpfile}`
        input_array=`cat $tmpfile`
}

function volSync {

        getSinkInputs ${active_sink}
        getCurVol

        for each in ${input_array}
        do
                pactl set-sink-input-volume ${each} ${curVol}%
        done

}

function getCurVol {

        curVol=`pacmd list-sinks |grep -wA 15 'index: '${active_sink}'' |grep 'volume:' |egrep -v 'base volume:' |awk -F : '{print $3}' |grep -o -P '.{0,3}%'|sed s/.$// |tr -d ' '`

}

function volMute {

        case "$1" in
                mute)
                        pactl set-sink-mute ${active_sink} 1
                        curVol=0
                        status=1
                ;;
                unmute)
                        pactl set-sink-mute ${active_sink} 0
                        getCurVol
                        status=0
                ;;
        esac

        if [ ${osd} = 'yes' ]
        then
                qdbus org.kde.kded /modules/kosd showVolume ${curVol} ${status}
        fi

}

function volMuteStatus {

        curStatus=`pacmd list-sinks |grep -A 15 'index: '${active_sink}'' |awk '/muted/{ print $2}'`

        if [ ${curStatus} = 'yes' ]
        then
                volMute unmute
        else
                volMute mute
        fi

}


function application_evaluation {
    pactl list sink-inputs |while read line; do \
    sink_num_check=$(echo "$line" |sed -rn 's/^Sink Input #(.*)/\1/p')
    if [ "$sink_num_check" != "" ]; then
        current_sink_num="$sink_num_check"
    else
        app_name_check=$(echo "$line" \
            |sed -rn 's/application.name = "([^"]*)"/\1/p')
        if [ "$app_name_check" = "$1" ]; then
            echo "$current_sink_num" "$app_name_check"

            pactl $2 "$current_sink_num" $3
        fi
    fi
done
}


function application_controll {
    case "$2" in
        "--up") application_evaluation $1 set-sink-input-volume +5%;;
        "--down") application_evaluation $1 set-sink-input-volume -5%;;
        "--togmute") application_evaluation $1 set-sink-input-mute toggle;;
    esac

}

function input_controll {
    case "$1" in
        "--up") pactl set-source-volume @DEFAULT_SOURCE@ +5%;;
        "--down") pactl set-source-volume @DEFAULT_SOURCE@ -5%;;
        "--togmute") pactl set-source-mute @DEFAULT_SOURCE@ toggle;;
    esac
}

function output_controll {
    case "$1" in
        "--up") volUp;;
        "--down") volDown;;
        "--togmute") volMuteStatus;;
    esac
}

case "$1" in
    "--application") application_controll $2 $3;;
    "--output") output_controll $2;;
    "--input") input_controll $2;;
esac
